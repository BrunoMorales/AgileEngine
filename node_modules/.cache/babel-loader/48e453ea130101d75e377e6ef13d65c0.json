{"ast":null,"code":"import AxiosClient from \"./AxiosClient\";\nimport getToken from \"./TokenFetcher\";\nexport const fetchImages = async page => {\n  const {\n    token\n  } = await getToken();\n\n  try {\n    const response = await AxiosClient.get('/images', {\n      params: {\n        page\n      },\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw Error(error);\n  }\n};\nexport const fetchImageDetails = async id => {\n  const token = await getToken();\n\n  try {\n    const response = await AxiosClient.get('/images', {\n      params: {\n        id\n      },\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n    return response;\n  } catch (error) {\n    throw Error(error);\n  }\n};","map":{"version":3,"sources":["/Users/brunomorales/Documents/Personal/Agileengine/file-displayer/src/utils/ImageFetcher.ts"],"names":["AxiosClient","getToken","fetchImages","page","token","response","get","params","headers","authorization","data","error","Error","fetchImageDetails","id"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAYA,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAP,IAA4C;AACnE,QAAM;AAAEC,IAAAA;AAAF,MAAY,MAAMH,QAAQ,EAAhC;;AACA,MAAI;AACA,UAAMI,QAAQ,GAAG,MAAML,WAAW,CAACM,GAAZ,CAAgB,SAAhB,EAA2B;AAC9CC,MAAAA,MAAM,EAAE;AAAEJ,QAAAA;AAAF,OADsC;AAC5BK,MAAAA,OAAO,EAAE;AACvBC,QAAAA,aAAa,EAAG,UAASL,KAAM;AADR;AADmB,KAA3B,CAAvB;AAKA,WAAOC,QAAQ,CAACK,IAAhB;AACH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,UAAMC,KAAK,CAACD,KAAD,CAAX;AACH;AACJ,CAZM;AAcP,OAAO,MAAME,iBAAiB,GAAG,MAAOC,EAAP,IAAsB;AACnD,QAAMV,KAAK,GAAG,MAAMH,QAAQ,EAA5B;;AACA,MAAI;AACA,UAAMI,QAAQ,GAAG,MAAML,WAAW,CAACM,GAAZ,CAAgB,SAAhB,EAA2B;AAC9CC,MAAAA,MAAM,EAAE;AAAEO,QAAAA;AAAF,OADsC;AAC9BN,MAAAA,OAAO,EAAE;AACrBC,QAAAA,aAAa,EAAG,UAASL,KAAM;AADV;AADqB,KAA3B,CAAvB;AAKA,WAAOC,QAAP;AACH,GAPD,CAOE,OAAOM,KAAP,EAAc;AACZ,UAAMC,KAAK,CAACD,KAAD,CAAX;AACH;AACJ,CAZM","sourcesContent":["import AxiosClient from \"./AxiosClient\"\nimport getToken from \"./TokenFetcher\"\n\nexport interface imagePage {\n    hasMore: boolean,\n    page: number,\n    pageCount: number,\n    pictures: {\n        id: string,\n        cropped_picture: string,\n    }[],\n}\n\nexport const fetchImages = async (page: number): Promise<imagePage> => {\n    const { token } = await getToken()\n    try {\n        const response = await AxiosClient.get('/images', {\n            params: { page }, headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n        return response.data\n    } catch (error) {\n        throw Error(error)\n    }\n}\n\nexport const fetchImageDetails = async (id: string) => {\n    const token = await getToken()\n    try {\n        const response = await AxiosClient.get('/images', {\n            params: { id }, headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n        return response\n    } catch (error) {\n        throw Error(error)\n    }\n}"]},"metadata":{},"sourceType":"module"}