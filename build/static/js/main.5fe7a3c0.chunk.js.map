{"version":3,"sources":["serviceWorker.js","utils/AxiosClient.ts","utils/TokenFetcher.ts","utils/ImageFetcher.ts","components/ImageDetail/index.ts","components/ImageDetail/ImageDetail.tsx","components/ImageDisplayer/index.ts","components/ImageDisplayer/ImageDisplayer.tsx","pages/Main/index.ts","pages/Main/Main.tsx","index.js"],"names":["Boolean","window","location","hostname","match","axios","create","baseURL","getToken","a","AxiosClient","post","apiKey","response","data","Error","fetchImages","page","token","get","params","headers","authorization","fetchImageDetails","id","ImageDetail","imageIndex","setImageIndex","pictures","useState","undefined","details","setDetails","useEffect","then","res","fullTags","className","src","full_picture","alt","author","camera","tags","split","slice","map","tag","index","key","href","target","onClick","length","navigator","share","shareData","title","text","url","console","log","catch","error","ImageDisplayer","detailImageIndex","setdetailImageIndex","picture","cropped_picture","Main","setPage","pageCount","setPageCount","setPictures","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5fe7a3c0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\n\nexport default axios.create({\n    baseURL: 'http://interview.agileengine.com',\n})","import AxiosClient from './AxiosClient'\n\n\nconst getToken = async (): Promise<any> => {\n    try {\n        const response = await AxiosClient.post('/auth', { apiKey: \"23567b218376f79d9415\" })\n        return response.data\n    } catch (error) {\n        throw Error(error)\n    }\n}\n\nexport default getToken","import AxiosClient from \"./AxiosClient\"\nimport getToken from \"./TokenFetcher\"\n\nexport interface picture {\n    id: string,\n    cropped_picture: string,\n}\n\nexport interface imagePage {\n    hasMore: boolean,\n    page: number,\n    pageCount: number,\n    pictures: picture[],\n}\n\nexport const fetchImages = async (page: number): Promise<imagePage> => {\n    const { token } = await getToken()\n    try {\n        const response = await AxiosClient.get('/images', {\n            params: { page }, headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n        return response.data\n    } catch (error) {\n        throw Error(error)\n    }\n}\n\nexport interface imageDetail {\n    author: string,\n    camera: string,\n    full_picture: string,\n    tags: string,\n}\n\nexport const fetchImageDetails = async (id: string): Promise<imageDetail> => {\n    const { token } = await getToken()\n    try {\n        const response = await AxiosClient.get(`/images/${id}`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n        return response.data\n    } catch (error) {\n        throw Error(error)\n    }\n}","import ImageDetail from './ImageDetail'\nexport default ImageDetail","import React, { ReactElement, FC, useEffect, useState } from \"react\";\nimport { fetchImageDetails, imageDetail, picture } from \"../../utils/ImageFetcher\";\n\ninterface detailProps {\n    imageIndex: number | undefined\n    setImageIndex: (index: number | undefined) => void\n    pictures: picture[]\n}\n\nconst ImageDetail: FC<detailProps> = ({ imageIndex, setImageIndex, pictures }): ReactElement => {\n    const [details, setDetails] = useState<imageDetail | undefined>(undefined)\n\n    useEffect(() => {\n        imageIndex && fetchImageDetails(pictures[imageIndex].id).then(\n            res => setDetails(res)\n        )\n    }, [imageIndex])\n\n    const close = () => setImageIndex(undefined)\n\n    const tags = (fullTags: string): string[] => (fullTags.split('#').slice(1))\n\n    const nextImage = () => imageIndex && imageIndex < pictures.length && setImageIndex(imageIndex + 1)\n    const prevImage = () => imageIndex && imageIndex > 0 && setImageIndex(imageIndex - 1)\n    const shareImage = () => {\n        const shareData = {\n            title: imageIndex ? pictures[imageIndex].id : '',\n            text: 'picture by ' + details?.author,\n            url: details?.full_picture,\n        }\n        navigator.share(shareData)\n            .then(response => console.log('image shared.', response))\n            .catch(error => console.log('Image wass not shared.', error))\n    }\n\n    return (\n        <section className={`${imageIndex ? 'absolute' : 'hidden'} w-full px-2`}>\n            <div className={`rounded-lg bg-white border-2 w-full p-4 box-shadow`}>\n                <h2 className='mb-2'>\n                    Picture ID:\n                    <strong>\n                        {imageIndex && pictures[imageIndex].id}\n                    </strong>\n                </h2>\n                <img src={details?.full_picture} alt={imageIndex ? pictures[imageIndex].id : ''} className='mb-2 object-contain mx-auto border rounded-xl' />\n                <p className='mb-2'>\n                    Author: {details?.author}\n                </p>\n                <p className='mb-2'>Camera with which the picture was taken: {details?.camera}</p>\n                <div>\n                    {details && tags(details.tags)\n                        .map((tag, index) => (\n                            <a key={index} href={`https://www.facebook.com/hashtag/${tag}`} target='_blank' className='mx-3'>\n                                #{tag}\n                            </a>\n                        ))}\n                </div>\n                <div className='flex flex-row justify-between mb-8'>\n                    <button className='bg-blue-400 rounded px-2 py-1 md:px-4 md:py-2' onClick={prevImage}>\n                        Previous Image\n                </button>\n                    <button className='bg-blue-400 rounded px-2 py-1 md:px-4 md:py-2' onClick={nextImage}>\n                        Next Image\n                </button>\n                </div>\n                <div className='flex justify-between'>\n\n                    <button className='rounded p-2 bg-red-400' onClick={close}>\n                        Close\n                </button>\n                    {navigator.share && <button onClick={shareImage} className='rounded-full text-white bg-green-800 h-full p-3'>\n                        Share\n                </button>}\n                </div>\n            </div>\n        </section >\n    )\n}\n\nexport default ImageDetail","import ImageDisplayer from './ImageDisplayer'\nexport default ImageDisplayer","import React, { ReactElement, FC, useState, } from \"react\";\nimport { picture } from \"../../utils/ImageFetcher\";\nimport ImageDetail from \"../ImageDetail\";\n\n\ninterface imageDisplayerProps {\n    pictures: picture[]\n}\n\n\nconst ImageDisplayer: FC<imageDisplayerProps> = ({ pictures }): ReactElement => {\n    const [detailImageIndex, setdetailImageIndex] = useState<number | undefined>(undefined)\n\n    return (\n        <section className='flex flex-wrap justify-center'>\n            {\n                pictures.map((picture, index) =>\n                    <button\n                        className='rounded-lg overflow-hidden w-1/2 md:w-1/5 lg:w-1/12 lg:mx-2 border-green-600 border flex-grow'\n                        onClick={() => setdetailImageIndex(index)}\n                    >\n                        <img key={index} className='object-contain' src={picture.cropped_picture} alt={picture.id} />\n                    </button>\n                )\n            }\n            <ImageDetail imageIndex={detailImageIndex} setImageIndex={setdetailImageIndex} pictures={pictures} />\n        </section>\n    )\n}\n\nexport default ImageDisplayer","import Main from './Main'\nexport default Main","import React, { ReactElement, FC, useState, useEffect } from \"react\";\nimport ImageDisplayer from \"../../components/ImageDisplayer\";\nimport { fetchImages, picture } from \"../../utils/ImageFetcher\";\n\n\nconst Main: FC = (): ReactElement => {\n    const [page, setPage] = useState<number>(1)\n    const [pageCount, setPageCount] = useState<number>(1)\n    const [pictures, setPictures] = useState<picture[]>([])\n\n    useEffect(() => {\n        fetchImages(page)\n            .then(response => {\n                const { pictures, pageCount } = response\n                setPictures(pictures)\n                setPageCount(pageCount)\n            })\n    }, [])\n\n    useEffect(() => {\n        fetchImages(page)\n            .then(response => {\n                const { pictures } = response\n                setPictures(pictures)\n            })\n\n    }, [page])\n\n\n    return (\n        <main className='py-10 px-5'>\n            <h1 className='text-xl mb-8'>\n                <strong>\n                    AgileEngine Interview\n                </strong>\n            </h1>\n\n            <div className='flex flex-row justify-between mb-8'>\n                <button className='bg-blue-400 rounded px-2 py-1 md:px-4 md:py-2' onClick={() => page > 1 && setPage(page - 1)}>\n                    Previous\n                </button>\n                <p>\n                    Current page: {page}\n                </p>\n                <button className='bg-blue-400 rounded px-2 py-1 md:px-4 md:py-2' onClick={() => page < pageCount && setPage(page + 1)}>\n                    Next\n                </button>\n            </div>\n            <ImageDisplayer pictures={pictures} />\n        </main>\n    )\n}\n\n\nexport default Main","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Main from './pages/Main';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}